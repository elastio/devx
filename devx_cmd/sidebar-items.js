initSidebarItems({"enum":[["Ostream","Defines the kind of standard process output stream."]],"macro":[["cmd","Create a [`Cmd`] with the given binary and arguments."],["read","Shortcut for `cmd!(...).read()`."],["read_bytes","Shortcut for `cmd!(...).read_bytes()`."],["run","Shortcut for `cmd!(...).run()`."]],"struct":[["Child","Wraps [`std::process::Child`], kills and waits for the process on [`Drop`]. It will log the fact that [`std::process::Child::kill()`] was called in [`Drop`]. You should use [`Child::wait()`] for the process to finish with any of the available methods if you want to handle the error, otherwise it will be ignored."],["Cmd","More convenient version of [`std::process::Command`]. Allows for spawning child processes with or without capturing their stdout. It also comes with inbuilt logging of the invocations via [`log`] crate."],["Error","Opaque error which happened during command execution."]],"type":[["Result","Shortcut for `Result<T, devx_cmd::Error>`"]]});