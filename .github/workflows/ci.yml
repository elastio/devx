name: ci

on:
  pull_request:
  push:
    # `staging` and `trying` are required for bors
    branches: [master, staging, trying]
    tags: ['**']

env:
  # Just a reassurance to mitigate sudden network connection problems
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10

  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: full

  # We don't need any debug symbols on ci, this also speeds up builds a bunch
  RUSTFLAGS: --deny warnings -Cdebuginfo=0
  RUSTDOCFLAGS: --deny warnings

jobs:
  # Audit Rust vulnerabilities, licenses, duplicated deps as specified in `deny.toml`
  cargo-deny-check:
    runs-on: ubuntu-latest
    # This job is optional because:
    # - Sudden vulnerability announcement that touches us will break all ci runs
    # - cargo-deny is mostly useful for the maintainers, we want contributors
    #   to avoid spending much time learning this tool if this job doesn't pass
    continue-on-error: true
    steps:
      - uses: actions/checkout@v2
      - uses: EmbarkStudios/cargo-deny-action@v1

  rust-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: rustfmt, clippy

      - run: cargo clippy --workspace --locked
      - run: cargo fmt --all -- --check

  rust-test:
    runs-on: ${{ matrix.os }}

    # We don't want unstable jobs to fail our cicd
    continue-on-error: ${{ matrix.toolchain != 'stable' }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        toolchain: [stable]
        include:
          - { os: ubuntu-latest, toolchain: beta }
          - { os: ubuntu-latest, toolchain: nightly }

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          profile: minimal

      - run: cargo +${{ matrix.toolchain }} build --workspace
      - run: cargo +${{ matrix.toolchain }} test --workspace --no-run
      - run: cargo +${{ matrix.toolchain }} test --workspace

  rust-publish-crates:
    # Publishing goes when we create a new git tag on the repo
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    # XXX: this job must execute only if all checks pass!
    needs:
      - cargo-deny-check
      - rust-lint
      - rust-test
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
      - name: Publish all crates
        env:
          # XXX: leaf crates should go first, and their reverse dependencies after them
          CRATES: devx-cmd devx-pre-commit
        run: |
          set -ex
          for crate in ${{ env.CRATES }}; do
            echo Publishing $crate...

            (cd $crate && cargo publish --token ${{ secrets.CRATES_TOKEN }})

            # crates.io has eventual consistency, we wait for new version to propagate
            echo Waiting...
            sleep 20
          done
